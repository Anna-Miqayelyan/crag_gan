#include <iostream>
#include <algorithm>
using namespace std;

// AVL Tree Node
struct Node {
    int data;
    Node* left;
    Node* right;
    int height;
    
    Node(int val) : data(val), left(nullptr), right(nullptr), height(1) {}
};

// Function to get the height of a node
int height(Node* node) {
    return node ? node->height : 0;
}

// Function to get the balance factor of a node
int getBalance(Node* node) {
    return node ? height(node->left) - height(node->right) : 0;
}

// Right rotate utility (for balancing)
Node* rightRotate(Node* y) {
    Node* x = y->left;
    Node* T2 = x->right;
    
    // Perform rotation
    x->right = y;
    y->left = T2;
    
    // Update heights
    y->height = max(height(y->left), height(y->right)) + 1;
    x->height = max(height(x->left), height(x->right)) + 1;
    
    // Return the new root
    return x;
}

// Left rotate utility (for balancing)
Node* leftRotate(Node* x) {
    Node* y = x->right;
    Node* T2 = y->left;
    
    // Perform rotation
    y->left = x;
    x->right = T2;
    
    // Update heights
    x->height = max(height(x->left), height(x->right)) + 1;
    y->height = max(height(y->left), height(y->right)) + 1;
    
    // Return the new root
    return y;
}

// Utility to insert a new node
Node* insert(Node* root, int key) {
    if (!root) {
        return new Node(key);
    }

    // Insert in the appropriate subtree
    if (key < root->data) {
        root->left = insert(root->left, key);
    } else if (key > root->data) {
        root->right = insert(root->right, key);
    } else {
        return root; // No duplicates allowed
    }

    // Update height of the current node
    root->height = 1 + max(height(root->left), height(root->right));

    // Check for unbalance
    int balance = getBalance(root);

    // Left Left Case
    if (balance > 1 && key < root->left->data) {
        return rightRotate(root);
    }

    // Right Right Case
    if (balance < -1 && key > root->right->data) {
        return leftRotate(root);
    }

    // Left Right Case
    if (balance > 1 && key > root->left->data) {
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }

    // Right Left Case
    if (balance < -1 && key < root->right->data) {
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }

    return root;
}

// Utility to find the node with the minimum value
Node* minValueNode(Node* node) {
    Node* current = node;
    while (current && current->left) {
        current = current->left;
    }
    return current;
}

// Function to delete the minimum node
Node* deleteMinNode(Node* root) {
    if (!root) {
        return root;
    }

    // If left child is NULL, we delete this node and return its right child
    if (!root->left) {
        Node* temp = root->right;
        delete root;
        return temp;
    }

    // Recursively go left to find the minimum node
    root->left = deleteMinNode(root->left);

    // Update the height of the current node
    root->height = 1 + max(height(root->left), height(root->right));

    // Check for unbalance
    int balance = getBalance(root);

    // Left Left Case
    if (balance > 1 && getBalance(root->left) >= 0) {
        return rightRotate(root);
    }

    // Right Right Case
    if (balance < -1 && getBalance(root->right) <= 0) {
        return leftRotate(root);
    }

    // Left Right Case
    if (balance > 1 && getBalance(root->left) < 0) {
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }

    // Right Left Case
    if (balance < -1 && getBalance(root->right) > 0) {
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }

    return root;
}

// Utility to search for a node
Node* search(Node* root, int key) {
    if (!root || root->data == key) {
        return root;
    }

    if (key < root->data) {
        return search(root->left, key);
    }
    return search(root->right, key);
}

// Inorder Traversal (to display the tree)
void inorder(Node* root) {
    if (root) {
        inorder(root->left);
        cout << root->data << " ";
        inorder(root->right);
    }
}

// Driver Code
int main() {
    Node* root = nullptr;

    // Inserting nodes
    root = insert(root, 20);
    root = insert(root, 10);
    root = insert(root, 30);
    root = insert(root, 5);
    root = insert(root, 15);
    root = insert(root, 40);

    // Inorder traversal of the AVL tree
    cout << "Inorder traversal of the AVL tree: ";
    inorder(root);
    cout << endl;

    // Deleting the minimum node
    cout << "Deleting the minimum node..." << endl;
    root = deleteMinNode(root);

    // Inorder traversal after deletion
    cout << "Inorder traversal after deletion of minimum node: ";
    inorder(root);
    cout << endl;

    return 0;
}
