#include <iostream>
#include <vector>
using namespace std;

// Definition for a binary tree node.
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

class Solution {
public:
    int minCameraCover(TreeNode* root) {
        int cameras = 0;
        int state = dfs(root, cameras);
        if (state == 0) { // If the root is not covered, place a camera
            cameras++;
        }
        return cameras;
    }

private:
    int dfs(TreeNode* node, int& cameras) {
        if (!node) {
            return 1; // Null nodes are considered covered
        }

        int left = dfs(node->left, cameras);  // Traverse left subtree
        int right = dfs(node->right, cameras); // Traverse right subtree

        // If any child is not covered, place a camera here
        if (left == 0 || right == 0) {
            cameras++;
            return 2; // This node has a camera
        }

        // If any child has a camera, this node is covered
        if (left == 2 || right == 2) {
            return 1; // This node is covered
        }

        // If both children are covered, this node is not covered
        return 0;
    }
};

// Helper function to create a binary tree (for testing)
TreeNode* createTree() {
    TreeNode* root = new TreeNode(0);
    root->left = new TreeNode(1);
    root->right = new TreeNode(5);
    root->left->left = new TreeNode(2);
    root->left->right = new TreeNode(3);
    root->right->right = new TreeNode(4);
    return root;

}

// Function to print the tree in {parent,child1,child2} format
void printTree(TreeNode* root) {
    if (!root) return;

    // Use a vector to store the tree nodes and their children
    vector<pair<int, vector<int>>> tree;

    // Helper function to traverse the tree and populate the vector
    auto traverse = [&](TreeNode* node, auto&& self) -> void {
        if (!node) return;

        vector<int> children;
        if (node->left) children.push_back(node->left->val);
        if (node->right) children.push_back(node->right->val);

        tree.push_back({ node->val, children });

        // Traverse left and right subtrees
        self(node->left, self);
        self(node->right, self);
        };

    // Start traversal from the root
    traverse(root, traverse);

    // Print the tree in the desired format
    for (size_t i = 0; i < tree.size(); ++i) {
        cout << "{" << tree[i].first;
        for (int child : tree[i].second) {
            cout << "," << child;
        }
        cout << "}";
        if (i < tree.size() - 1) {
            cout << ",";
        }
    }
    cout << endl;
}

// Function to delete the tree and free memory
void deleteTree(TreeNode* root) {
    if (root == nullptr) return;
    deleteTree(root->left);
    deleteTree(root->right);
    delete root;
}

int main() {
    // Create a binary tree
    TreeNode* root = createTree();

    // Print the tree in {parent,child1,child2} format
    cout << "Tree structure: ";
    printTree(root);

    // Solve the problem
    Solution solution;
    int result = solution.minCameraCover(root);

    // Output the result
    cout << "Minimum number of cameras needed: " << result << endl;

    // Clean up memory
    deleteTree(root);

    return 0;
}
